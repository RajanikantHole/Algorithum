
import SwiftUI

struct ProfileView: View {
    @State var seletedSegment = 0
    var body: some View {
        CustomSegmentedControl(
        data: SegmentedControlEnum.profile.themeColors,
        seletedSegment: $seletedSegment)
    }
}

extension UIImage {

    //creates a UIImage given a UIColor
    public convenience init?(color: UIColor, size: CGSize = CGSize(width: 1, height: 1)) {
        let rect = CGRect(origin: .zero, size: size)
        UIGraphicsBeginImageContextWithOptions(rect.size, false, 0.0)
        color.setFill()
        UIRectFill(rect)
        let image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        guard let cgImage = image?.cgImage else { return nil }
        self.init(cgImage: cgImage)
    }
}

enum SegmentedControlEnum {
    case profile

    var themeColors: SegmentedControlData {
        switch self {
        case .profile:
            let theme = SegmentedControlData(
                segmentOptions: ["First", "Sec445554ond3333333"],
                selectedSegmentForegroundColor: UIColor(.green),
                selectedSegmentBackgroundColor: UIColor(.white),
                normalSegmentForegroundColor: UIColor(.gray),
                normalSegmentBackgroundColor: UIColor(.gray.opacity(0.5)),
                borderSegmentColor: UIColor(.gray.opacity(0.5)))
            return theme
        }
    }
}

class UIKitSegmentedControl: UISegmentedControl {
    private let segmentInset: CGFloat = 8
    var backgroundPickerColor: UIColor
    var borderPickerColor: UIColor
    var foregroundColor: UIColor

    init(backgroundPickerColor: UIColor, borderPickerColor: UIColor, foregroundColor: UIColor) {
        self.backgroundPickerColor = backgroundPickerColor
        self.borderPickerColor = borderPickerColor
        self.foregroundColor = foregroundColor

        super.init(frame: .zero)
        self.setDividerImage(UIImage(), forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .default)
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func layoutSubviews() {
        super.layoutSubviews()

        //background
        layer.cornerRadius = bounds.height/2
        self.backgroundColor = backgroundPickerColor
        self.frame.size.height = 40.0
        self.layer.cornerRadius = 20
        self.layer.borderWidth = 0
      //  self.layer.borderColor = borderPickerColor.cgColor

        //foreground
        let foregroundIndex = numberOfSegments
        if subviews.indices.contains(foregroundIndex), let foregroundImageView = subviews[foregroundIndex] as? UIImageView {
            foregroundImageView.bounds = foregroundImageView.bounds.insetBy(dx: segmentInset, dy: segmentInset)
            foregroundImageView.image = UIImage(color: foregroundColor)
            foregroundImageView.layer.removeAnimation(forKey: "SelectionBounds")
            foregroundImageView.layer.masksToBounds = true
            foregroundImageView.layer.cornerRadius = foregroundImageView.bounds.height/2
        }
    }
}

struct CustomSegmentedControl: UIViewRepresentable {
    var data: SegmentedControlData
    @Binding var seletedSegment: Int

    func makeUIView(context: Context) -> UISegmentedControl {
        let segmentedControl =
        UIKitSegmentedControl(
            backgroundPickerColor: data.normalSegmentBackgroundColor,
            borderPickerColor: data.borderSegmentColor,
            foregroundColor: data.selectedSegmentBackgroundColor)
        segmentedControl.addTarget(context.coordinator, action: #selector(Coordinator.valueChanged(_:)), for: .valueChanged)

        print(seletedSegment)

        let normalAttributes: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 10),
            .foregroundColor: data.normalSegmentForegroundColor
        ]

        let selectedAttributes: [NSAttributedString.Key: Any] = [
            .font: UIFont.boldSystemFont(ofSize: 10),
            .foregroundColor: data.selectedSegmentForegroundColor
        ]

        segmentedControl.setTitleTextAttributes(normalAttributes, for: .normal)
        segmentedControl.setTitleTextAttributes(selectedAttributes, for: .selected)

        for (index, option) in data.segmentOptions.enumerated() {
            segmentedControl.insertSegment(withTitle: option, at: index, animated: false)
        }
        return segmentedControl
    }

    func updateUIView(_ uiView: UISegmentedControl, context: Context) {
        uiView.selectedSegmentIndex = seletedSegment
    }

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
}

extension CustomSegmentedControl {
    class Coordinator: NSObject {
        var control: CustomSegmentedControl
        init(_ control: CustomSegmentedControl) {
            self.control = control
        }
        @objc func valueChanged(_ sender: UISegmentedControl) {
            control.seletedSegment = sender.selectedSegmentIndex
        }
    }
}

struct SegmentedControlData {
    var segmentOptions: [String]
    var selectedSegmentForegroundColor: UIColor
    var selectedSegmentBackgroundColor: UIColor
    var normalSegmentForegroundColor: UIColor
    var normalSegmentBackgroundColor: UIColor
    var borderSegmentColor: UIColor
}



class SegmentedControl: UISegmentedControl {
    override func layoutSubviews() {
        super.layoutSubviews()
        //background
        layer.cornerRadius = bounds.height/2
        layer.backgroundColor = UIColor.purple.cgColor

        //foreground
        let foregroundIndex = numberOfSegments
        if subviews.indices.contains(foregroundIndex), let foregroundImageView = subviews[foregroundIndex] as? UIImageView {
            foregroundImageView.bounds = foregroundImageView.bounds.insetBy(dx: CGFloat(foregroundIndex), dy: CGFloat(foregroundIndex))
         //   foregroundImageView.image = UIImage(color:)
            foregroundImageView.layer.removeAnimation(forKey: "SelectionBounds")
            foregroundImageView.layer.masksToBounds = true
            foregroundImageView.layer.cornerRadius = foregroundImageView.bounds.height/2
        }
    }
}

struct CustomSegmentedPicker: UIViewRepresentable {
    @Binding var selectedIndex: Int
    let items: [String]
    var height: CGFloat = 50

    func makeUIView(context: Context) -> UISegmentedControl {
        let segmentedControl = UISegmentedControl(items: items)
        segmentedControl.layer.cornerRadius = 16
        segmentedControl.frame.size.height = 70.0
        segmentedControl.selectedSegmentIndex = selectedIndex
        segmentedControl.addTarget(context.coordinator, action: #selector(Coordinator.segmentChanged(_:)), for: .valueChanged)

        // Set height
        segmentedControl.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            segmentedControl.heightAnchor.constraint(equalToConstant: height)
        ])

        return segmentedControl
    }

    func updateUIView(_ uiView: UISegmentedControl, context: Context) {
        uiView.selectedSegmentIndex = selectedIndex
    }

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }

    class Coordinator: NSObject {
        var parent: CustomSegmentedPicker

        init(_ parent: CustomSegmentedPicker) {
            self.parent = parent
        }

        @objc func segmentChanged(_ sender: UISegmentedControl) {
            parent.selectedIndex = sender.selectedSegmentIndex
        }
    }
}

struct ContentView22: View {
    @State private var selectedSegment = 0
    let segments = ["first", "2Sec445554ond3333333"]

    var body: some View {
        VStack(spacing: 20) {
//            CustomSegmentedPicker(selectedIndex: $selectedSegment, items: segments, height: 90)
//                .padding(.horizontal, 20)

            Text("Selected: \(segments[selectedSegment])")
                .font(.headline)
        }
        .padding()
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ProfileView(seletedSegment: 0)
    }
}

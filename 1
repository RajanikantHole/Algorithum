import SwiftUI
import Combine

// Child ViewModel
class ChildViewModel: ObservableObject {
    @Published var childText: String = "" {
        didSet {
            onTextChanged?(childText)
        }
    }

    // Callback for notifying parent
    var onTextChanged: ((String) -> Void)?
}

// Parent ViewModel
class ParentViewModel: ObservableObject {
    @Published var receivedText: String = "Waiting for child..."

    let childVM = ChildViewModel()

    init() {
        // Connect child's callback to parent's handler
        childVM.onTextChanged = { [weak self] newText in
            self?.receivedText = "Received: \(newText)"
        }
    }
}

// SwiftUI View
struct ContentView: View {
    @StateObject private var parentVM = ParentViewModel()

    var body: some View {
        VStack(spacing: 20) {
            Text("Parent ViewModel: \(parentVM.receivedText)")
                .padding()

            TextField("Type in Child", text: $parentVM.childVM.childText)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()
        }
        .padding()
    }
}

#Preview {
    ContentView()
}
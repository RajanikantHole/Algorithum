import SwiftUI

// Data Model
struct SectionData: Identifiable {
    let id = UUID()
    let title: String
    let rows: [String]
}

// Sample Data
let sections: [SectionData] = [
    SectionData(title: "Section 1", rows: ["Row 1", "Row 2", "Row 3"]),
    SectionData(title: "Section 2", rows: ["Item 1", "Item 2"]),
    SectionData(title: "Section 3", rows: ["Data 1", "Data 2", "Data 3", "Data 4"])
]

struct ContentView: View {
    @State private var expandedSection: UUID? // Track only one expanded section

    init() {
        _expandedSection = State(initialValue: sections.first?.id) // Start with the first section expanded
    }

    var body: some View {
        List {
            ForEach(sections) { section in
                Section(
                    header: CustomHeader(
                        title: section.title,
                        isExpanded: expandedSection == section.id
                    ) {
                        withAnimation {
                            toggleSection(section.id)
                        }
                    }
                ) {
                    if expandedSection == section.id {
                        EmptyHolder {
                            VStack(spacing: 0) {
                                ForEach(section.rows, id: \.self) { row in
                                    Text(row)
                                        .frame(maxWidth: .infinity, alignment: .leading)
                                        .padding(.vertical, 5)
                                }
                            }
                        }
                    }
                }
                .listRowInsets(EdgeInsets())
            }
        }
        .listStyle(.grouped)
        .listSectionSpacing(0) // Removes spacing between sections
    }

    // Toggle section: Only one can be expanded at a time
    private func toggleSection(_ id: UUID) {
        expandedSection = (expandedSection == id) ? nil : id
    }
}

// Custom Header View
struct CustomHeader: View {
    let title: String
    let isExpanded: Bool
    let onTap: () -> Void

    var body: some View {
        HStack {
            Text(title)
                .font(.headline)
            Spacer()
            Image(systemName: isExpanded ? "chevron.down" : "chevron.right")
        }
        .padding()
        .background(Color.blue.opacity(0.2))
        .cornerRadius(8)
        .onTapGesture {
            onTap()
        }
    }
}

// Empty Holder for Reusability
struct EmptyHolder<Content: View>: View {
    let content: Content

    init(@ViewBuilder content: () -> Content) {
        self.content = content()
    }

    var body: some View {
        ZStack {
            RoundedRectangle(cornerRadius: 12)
                .stroke(Color.gray, lineWidth: 1)
                .background(Color.gray.opacity(0.1))
                .clipShape(RoundedRectangle(cornerRadius: 12)) // Corrected corner radius application

            content
                .padding(.vertical, 0)
                .padding(.horizontal)
        }
        .listRowInsets(EdgeInsets()) // Important for spacing control
    }
}